name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Test and Build Job
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tele_cicd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run TypeScript check
        run: npx tsc --noEmit || echo "TypeScript check completed with warnings"

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tele_cicd_test
          JWT_SECRET: test-secret
          TELEGRAM_BOT_TOKEN: test-token
          DEFAULT_BOT_USERNAME: test-user
          DEFAULT_BOT_PASSWORD: test-password
          WEBHOOK_SECRET: test-webhook-secret
        run: |
          npx prisma migrate deploy || npx prisma db push

      - name: Build application
        run: npm run build

      - name: Send CI notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          WORKFLOW="${{ github.workflow }}"
          BRANCH="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          ACTOR="${{ github.actor }}"
          RUN_URL="https://github.com/$REPO/actions/runs/$RUN_ID"
          
          echo "CI completed for $REPO on branch $BRANCH with status: $STATUS"
          echo "Run URL: $RUN_URL"
          
          # Optional: Send to webhook if configured
          if [ ! -z "${{ secrets.WEBHOOK_URL }}" ] && [ ! -z "${{ secrets.WEBHOOK_SECRET }}" ]; then
            PAYLOAD='{
              "workflow_name": "'$WORKFLOW'",
              "repository": "'$REPO'",
              "run_id": "'$RUN_ID'",
              "run_url": "'$RUN_URL'",
              "status": "'$STATUS'",
              "branch": "'$BRANCH'",
              "commit_sha": "'$COMMIT_SHA'",
              "commit_message": "'$COMMIT_MESSAGE'",
              "actor": "'$ACTOR'"
            }'

            curl -X POST -H "Content-Type: application/json" \
                 -H "X-Webhook-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
                 -d "$PAYLOAD" "${{ secrets.WEBHOOK_URL }}" || echo "Webhook notification failed"
          fi
